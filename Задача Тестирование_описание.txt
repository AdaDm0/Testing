				ООП С++
				Экзаменационные задания
______________________________________________________________________________________

Задание 1 (1 по списку)
-------------------------------
Реализовать простейший файловый менеджер с использованием ООП (классы, 
наследование и так далее). 
Файловый менеджер должен иметь такие возможности:
■ показывать содержимое дисков;
■ создавать папки/файлы; 
■ удалять папки/файлы; 
■ переименовывать папки/файлы;
■ копировать/переносить папки/файлы;
■ вычислять размер папки/файла;
■ производить поиск по маске (с поиском по подпапкам) и так далее
-------------------------------


папка, файл, интерфейс, менеджер (показать всё и др.)





______________________________________________________________________________________

Задание 2 (2 по списку)
-------------------------------
Реализовать полнофункциональную систему тестирования.
В системе должны быть реализовано 2 режима:
■ Администратор;
■ Тестируемый.

Описание режима работа для Тестируемого (в дальнейшем гость)
Для входа в систему гость должен зарегистрироваться. Данная процедура выполняется один раз, при дальнейших входах в систему доступ идет по логину 
и паролю.
При регистрации нужно указывать ФИО, домашний адрес, телефон.
Важно, чтобы логины для пользователей были уникальными.
После входа гость имеет возможность просмотреть свои предыдущие результаты тестирования, сдать новое тестирование.
Тестирование может осуществляться по различным категориям знаний. 
Например:
Математика (раздел) –> Дискретная математика (конкретный тест);
 –> Математический анализ (конкретный тест).
Физика (раздел) –> Квантовая физика (конкретный тест);
 –> Механика (конкретный тест).
После сдачи теста гость видит результат тестирования, количество правильно 
отвеченных вопросов, процент правильных ответов и полученную оценку.
Студент имеет возможность прервать тестирование и продолжить его тогда, 
когда ему это будет удобно.
Оценивание нужно вести на основании 5-балльной системы, привязанной 
к количеству вопросов теста.
Пароли и логины гостей хранятся в зашифрованном виде.

Описание режима работа для Администратора (в дальнейшем админ)
В системе может быть только один админ, логин и пароль админа задается 
при первом входе в программу.
В дальнейшем пароль и логин можно изменить (но данную возможность имеет 
только админ).
Пароль и логин необходимо хранить только в зашифрованном виде.
При работе с системой админ имеет следующие возможности:
• Управление пользователями – создание, удаление, модификация пользователей.
• Просмотр статистики – просмотр результатов тестирования в общем 
по категориям, по конкретным тестам, по конкретным пользователям. 
Результаты просмотра статистики можно вывести в файл.
• Управление тестированием – админ имеет возможность добавлять категории, тесты, вопросы к тестам, задавать правильные и неправильные ответы, 
импортировать и экспортировать категории и тесты с вопросами из файла (и в файл).
-------------------------------


Class User
	switch
	

Class Administrator: protected User (наследование)
	наследование класса User
	
	//Управление пользователями
	changePassword(),	// изменение пароля администратора
	createGuest();
	deleteGuest();
	changeGuest();
	
	//Просмотр статистики
	viewStatistics()
	//Управление тестированием
	addTopic()
	deleteTopic()
	changeTopic()
	addTest()
	changeTest()
	deleteTest()


Class DataBase	// обработка данных, шифрование пароля и логина 
	static шифрование(),		(метод Цезаря?)
	static дешифрование(),
	проверка логина(),
	проверка пароля(),


#Catalog, #FabrikaUsers
Class Menu
	1. регистрация / вход (ввод логина и пароля, проверка логина(), проверка пароля())
	2. вывод меню:
	    if (guestStatus == 0) // если тестируемый
		1. просмотреть предыдущих результатов тестирования
		2. сдать новое тестирование
		3. прервать тестирование
		4. продолжить тестирование
		5. просмотр каталога тестов
	     else 	// если админ
		1. Управление пользователями
		2. Управление тестированием
		3. Просмотр статистики
		4. Просмотр каталога тестов


Class Test
	vector question (вопрос, ответ пользователя, верный ответ)

	printTest (),
	checkTest (),
	


#Test
Class Topic (тесты по теме)
	viewAll ()


#Topic
Class Catalog (тематики тестирования)
	viewAll ()


#Administrator, #User
Class FabrikaUsers
	printApplicationForm() 	// вывод вопросника
	createUser ()
		printApplicationForm()
		 static проверка логина(), шифрование(), 
		if (status == 0) Гость-> запись логина и пароля (или всей инфы?) в файл;
		else Админ-> запись логина и пароля (или всей инфы?) в файл
